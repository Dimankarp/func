int strlen(string s) {
  int len = 0;
  while (s[len] != 0)
    len = len + 1;
  len = len + 1;
  return len;
}

void write_str(string s, int len) {
  int i = 0;
  while (i < len) {
    write(s[i]);
    i = i + 1;
  }
  return;
}

void itoascii(int n) { return n + 48; }
bool is_digit(int n) { return ((n > 47) && (n < 56)); }

int read_int() {
  int n = 0;
  int last = read();
  while (is_digit(last)) {
    n = n * 10;
    n = n + last - 48;
    last = read();
  }
  return n;
}

void write_int(int n) {
  string buf = "10000000000";
  int i = 0;
  while (n > 0) {
    buf[i] = n % 10;
    n = n / 10;
    i = i + 1;
  }
  i = i - 1;
  while (i > -1) {
    write(itoascii(buf[i]));
    i = i - 1;
  }
  return;
}

int regular_compare(int a, int b) { return a - b; }

int reverse_compare(int a, int b) { return b - a; }

int even_are_bigger_compare(int a, int b) {
  if (a % 2 == 0 && b % 2 != 0)
    return 1;
  if (a % 2 != 0 && b % 2 == 0)
    return -1;
  return a - b;
}

void insertion_sort(string arr, int n, (int - int - int)compare) {
  int i = 1;
  while (i < n) {
    int cur = arr[i];
    int j = i - 1;

    while ((j > 0 || j == 0) && (compare(arr[j], cur) > 0)) {
      arr[j + 1] = arr[j];
      j = j - 1;
    }
    arr[j + 1] = cur;
    i = i + 1;
  }
  return;
}

void print_arr(string s, int len) {
  int i = 0;
  while (i < len) {
    write(s[i]);
    write(32);
    i = i + 1;
  }
  write(10);
  return;
}

int main() {
  string s = "153462798";
  int len = strlen(s) - 1;
  insertion_sort(s, len, regular_compare);
  print_arr(s, len);
  insertion_sort(s, len, reverse_compare);
  print_arr(s, len);
  insertion_sort(s, len, even_are_bigger_compare);
  print_arr(s, len);
  return;
  /* Returns:
  1 2 3 4 5 6 7 8 9 
  9 8 7 6 5 4 3 2 1 
  1 3 5 7 9 2 4 6 8 
  */
}
