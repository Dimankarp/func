table: NAME, TYPE, HOW_TO_GET, OFFSET, [is_block_delimeter]

reg_alloc: NUM, TYPE (?), is_actual
reg_alloc.clear_is_actual()


gen_code(expr) -> (reg, type)
gen_code(expr):
	expr.accept(this);   // set up code context with register and type
	return code_context;

program: functions
program :>:
	label _START
	x31 = <STACK_BOTTOM>
	call MAIN
	ebreak	

functions:
	empty
	| functions function

function:
	func_res_type id ( param_list ) block

function :>:
	func_type = ...;
	table.add(id, func_type, LABEL, 0);
	for (param : param_list)
		table.add(id, type, STACK, offset);
	table.start_block();
	
	label FUNC_NAME
	... rec ...
	
	table.end_block();

param_list:
	empty
	| params
params:
	| param
	| params ',' param
param:
	type id



block:
	{ empty }
	| statement
	|{ statements }

statements:
	statement
	| statements statement

statement:
	type id ;
	| type id = expr;
	| id = expr;
	| id( arg_list );
	| if ( expr ) block
	| if ( expr ) block else block
	| while ( expr ) block
	| return expr;

expr:
	| expr <binop> expr
	| <unop> expr
	| id
	| id( args_list );
	| <literal>


args_list:
	empty
	|args
args:
	expr
	| args ',' expr

	
type: 
    INT_T 
    | BOOL_T 
    | STRING_T 
    | ‘(’ func_type ‘)’
func_res_type:
    type 
    | VOID_T
func_type:  
    type '-' func_type_rec
    | VOID_T ‘-’ func_res_type 
func_type_rec:
     type '-' func_type_rec 
     | func_res_type


